/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedReportRouteImport } from './routes/_protected/report'
import { Route as ProtectedDashboardRouteImport } from './routes/_protected/dashboard'
import { Route as ProtectedAdminRouteRouteImport } from './routes/_protected/admin/route'
import { Route as ProtectedAdminUsersRouteImport } from './routes/_protected/admin/users'

const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedReportRoute = ProtectedReportRouteImport.update({
  id: '/report',
  path: '/report',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedDashboardRoute = ProtectedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedAdminRouteRoute = ProtectedAdminRouteRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedAdminUsersRoute = ProtectedAdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => ProtectedAdminRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof ProtectedAdminRouteRouteWithChildren
  '/dashboard': typeof ProtectedDashboardRoute
  '/report': typeof ProtectedReportRoute
  '/admin/users': typeof ProtectedAdminUsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof ProtectedAdminRouteRouteWithChildren
  '/dashboard': typeof ProtectedDashboardRoute
  '/report': typeof ProtectedReportRoute
  '/admin/users': typeof ProtectedAdminUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/admin': typeof ProtectedAdminRouteRouteWithChildren
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/_protected/report': typeof ProtectedReportRoute
  '/_protected/admin/users': typeof ProtectedAdminUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/admin' | '/dashboard' | '/report' | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/admin' | '/dashboard' | '/report' | '/admin/users'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_protected/admin'
    | '/_protected/dashboard'
    | '/_protected/report'
    | '/_protected/admin/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/report': {
      id: '/_protected/report'
      path: '/report'
      fullPath: '/report'
      preLoaderRoute: typeof ProtectedReportRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/admin': {
      id: '/_protected/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof ProtectedAdminRouteRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/admin/users': {
      id: '/_protected/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof ProtectedAdminUsersRouteImport
      parentRoute: typeof ProtectedAdminRouteRoute
    }
  }
}

interface ProtectedAdminRouteRouteChildren {
  ProtectedAdminUsersRoute: typeof ProtectedAdminUsersRoute
}

const ProtectedAdminRouteRouteChildren: ProtectedAdminRouteRouteChildren = {
  ProtectedAdminUsersRoute: ProtectedAdminUsersRoute,
}

const ProtectedAdminRouteRouteWithChildren =
  ProtectedAdminRouteRoute._addFileChildren(ProtectedAdminRouteRouteChildren)

interface ProtectedRouteChildren {
  ProtectedAdminRouteRoute: typeof ProtectedAdminRouteRouteWithChildren
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
  ProtectedReportRoute: typeof ProtectedReportRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedAdminRouteRoute: ProtectedAdminRouteRouteWithChildren,
  ProtectedDashboardRoute: ProtectedDashboardRoute,
  ProtectedReportRoute: ProtectedReportRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
